{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"throws FileNotFoundException": {
		"prefix": "throws FileNotFoundException",
		"body": " throws FileNotFoundException",
		"description": "add a throws FileNotFoundException annotation to a method"
	},
	"System.out": {
		"prefix": ["sysout", "stdout"],
		"body": "System.out.println(${1:$TM_SELECTED_TEXT});$0",
		"description": "Outputs to stdout with selected text"
	},
	"Scanner": {
		"prefix": ["scan", "sysin", "sn"],
		"body": "Scanner ${1:${TM_SELECTED_TEXT:$TM_CURRENT_WORD}} = new Scanner(${2:System.in});$0",
		"description": "creates a new scanner with the name defined by selected text if applicable"
	},
	"Input File": {
		"prefix": ["scan", "input", "file", "dat"],
		"body": "Scanner ${1:${TM_SELECTED_TEXT:$TM_CURRENT_WORD}} = new Scanner( $TM_FILENAME_BASE.class.getResourceAsStream( \"./${2:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}.dat}\" ) ); $0",
		"description": "Creates a scanner with the contents of a file located adjacent to the class file"
	},
	"Main Class": {
		"prefix": "main",
		"body": [
			"public class $TM_FILENAME_BASE {",
			"\tpublic static void main(String[] args) {",
			"\t$0",
			"\t}",
			"}"
		],
		"description": "Creates a default class based on the file name with a public main method"
	},

	"Comment Documentation CS 1": {
		"prefix": "cs1-comment",
		"body": [
			"$BLOCK_COMMENT_START*",
			" * Class $TM_FILENAME_BASE",
			" *",
			" * <pre>",
			" * Author: Aaron Dill",
			" * Date:   $CURRENT_MONTH_NAME $CURRENT_DATE, $CURRENT_YEAR",
			" * Course: Computer Science I Honors",
			" * Period: 4th",
			" * </pre>",
			" *",
			" * Summary of file:",
			" * ${1:${TM_SELECTED_TEXT:$CLIPBOARD}}",
			" *",
			" *",
			" $BLOCK_COMMENT_END",
			"$0"
		],
		"description": "Inserts CS 1 Honors acceptable doc comment"
	},
	"Comment Documentation UIL": {
		"prefix": "uil-comment",
		"body": [
			"$BLOCK_COMMENT_START*",
			" * Class $TM_FILENAME_BASE",
			" *",
			" * <pre>",
			" * Author1: Aaron Dill",
			" * Author2: Dylan Lafferty",
			" * Author3: Evan Sao",
			" * Date:    $CURRENT_MONTH_NAME $CURRENT_DATE, $CURRENT_YEAR",
			" * </pre>",
			" *",
			" * Summary of file:",
			" * ${4:${TM_SELECTED_TEXT:$CLIPBOARD}}",
			" *",
			" $BLOCK_COMMENT_END",
			"$0"
		],
		"description": "Inserts doc comment for CS UIL"
	},
	"Data Count": {
		"prefix": "data count",
		"body": [
			"Scanner dataScanner = new Scanner( $TM_FILENAME_BASE.class.getResourceAsStream( \"./${2:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}.dat}\" ) );",
			"int dataCount = dataScanner.nextInt();",
			"dataScanner.nextLine();",
			"for (int i = 0; i < dataCount; i++) {",
			"    ${0:// Do Some Stuff}",
			"}"
		],
		"description": "Gets number of lines to read from the first line of a file, then repeats a loop that many times"
	}
}
